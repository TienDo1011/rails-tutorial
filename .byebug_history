exit
response.json
response.message
response.error?
response.error
response.statusCode
response.status
response.code
response
c
exit
request.headers["Authorization"]
@current_user
params
exit
request.headers["Authorization"]
headers
exit
request.headers["Authorization"]
request.headers
headers
exit
headers["Authorization"]
headers[:Authorization]
request.headers
exit
request.env[:Authorization]
request.headers
request.headers[:Authorization]
request.headers
headers
request.headers
exit
xhr :post, :create, relationship: { followed_id: other_user.id }
exit
User.first
user.reload.admin?
exit
user.update_attributes(name: "Example User", email: "example@railstutorial.org", password: "foobar", password_confirmation: "foobar")
User.all.count
user.update_attributes(name: "Example User", email: "example@railstutorial.org")
user = User.first
user
exit
user.update_attributes(name: "Example User", email: "example@railstutorial.org")
user.update_attributes(name: "Example User", email: "email@railstutorial.org")
user = User.first
User.first
exit
User.first.authenticate("validate")
User.first.password_digest
User.first
pry
request.headers["Authorization"]
request.headers.Authorization
request.params
request.headers
exit
request.params
request.headers[:Authorization] | grep 'Bearer'
request.headers[:Authorization]
request.headers.headers
request.headers
request.headers["Authorization"]
@current_user
c
request.headers[:Authorization]
request.headers["Authorization"]
request.headers["Authorization")
token
@current_user
exit
request.headers["Authorization"]
request.headers[Authorization]
request.headers
cookies
cookies[:remember_token]
exit
response
c
exit
xhr :post, :create, relationship: { followed_id: other_user.id }
exit
User.first
user.reload.admin?
exit
